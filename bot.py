import os
import json
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import TelegramError

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

DATA_FILE = 'data.json'

def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"blin": 0, "mak": 0, "shava": 0, "shash": 0}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

async def try_send_channel(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not CHANNEL_ID:
        print("‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return False
    try:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=text,
            parse_mode='Markdown'
        )
        return True
    except TelegramError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False

async def blin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["blin"] += 1
    save_data(data)

    response_text = f"ü•û –ë–ª–∏–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–í—Å–µ–≥–æ –±–ª–∏–Ω–æ–≤: {data['blin']}"

    channel_text = (
        f"üì¢ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!*\n\n"
        f"ü•û –ë–ª–∏–Ω –±—ã–ª —Å—ä–µ–¥–µ–Ω.\n"
        f"üìä –í—Å–µ–≥–æ –±–ª–∏–Ω–æ–≤: *{data['blin']}*.\n"
        f"üçΩÔ∏è –ö—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –º–µ—Ä—ã..."
    )

    sent = await try_send_channel(context, channel_text)
    if sent:
        await update.message.reply_text(response_text)
    else:
        await update.message.reply_text(
            response_text + "\n\n‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª."
        )

async def mak(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["mak"] += 1
    save_data(data)

    response_text = f"üçî –ú–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–í—Å–µ–≥–æ –º–∞–∫–æ–≤: {data['mak']}"

    channel_text = (
        f"üì¢ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!*\n\n"
        f"üçî –ú–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.\n"
        f"üìä –í—Å–µ–≥–æ –º–∞–∫–æ–≤: *{data['mak']}*.\n"
        f"üëÄ –î–∏–µ—Ç–æ–ª–æ–≥ –≤ –ø–∞–Ω–∏–∫–µ..."
    )

    sent = await try_send_channel(context, channel_text)
    if sent:
        await update.message.reply_text(response_text)
    else:
        await update.message.reply_text(
            response_text + "\n\n‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª."
        )

async def shava(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["shava"] += 1
    save_data(data)

    response_text = f"üåØ –®–∞—É—Ä–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n–í—Å–µ–≥–æ —à–∞—É—Ä–º: {data['shava']}"

    channel_text = (
        f"üì¢ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!*\n\n"
        f"üåØ –®–∞—É—Ä–º–∞ –±—ã–ª–∞ —Å—ä–µ–¥–µ–Ω–∞.\n"
        f"üìä –í—Å–µ–≥–æ —à–∞—É—Ä–º: *{data['shava']}*.\n"
        f"üòã –í–∫—É—Å–Ω—è—Ç–∏–Ω–∞!"
    )

    sent = await try_send_channel(context, channel_text)
    if sent:
        await update.message.reply_text(response_text)
    else:
        await update.message.reply_text(
            response_text + "\n\n‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª."
        )

async def shash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    data["shash"] += 1
    save_data(data)

    response_text = f"üç¢ –®–∞—à–ª—ã—á–û–ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–í—Å–µ–≥–æ —à–∞—à–ª—ã—á–∫–æ–≤: {data['shash']}"

    channel_text = (
        f"üì¢ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!*\n\n"
        f"üç¢ –®–∞—à–ª—ã—á–û–ö –±—ã–ª —Å—ä–µ–¥–µ–Ω.\n"
        f"üìä –í—Å–µ–≥–æ —à–∞—à–ª—ã—á–∫–æ–≤: *{data['shash']}*.\n"
        f"üî• –õ–µ—Ç–æ —Ä—è–¥–æ–º!"
    )

    sent = await try_send_channel(context, channel_text)
    if sent:
        await update.message.reply_text(response_text)
    else:
        await update.message.reply_text(
            response_text + "\n\n‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª."
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    stats_text = (
        f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"ü•û –ë–ª–∏–Ω–æ–≤: {data['blin']}\n"
        f"üçî –ú–∞–∫–æ–≤: {data['mak']}\n"
        f"üåØ –®–∞—É—Ä–º: {data.get('shava', 0)}\n"
        f"üç¢ –®–∞—à–ª—ã—á–∫–æ–≤: {data.get('shash', 0)}"
    )

    channel_text = (
        f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"ü•û –ë–ª–∏–Ω–æ–≤: {data['blin']}\n"
        f"üçî –ú–∞–∫–æ–≤: {data['mak']}\n"
        f"üåØ –®–∞—É—Ä–º: {data.get('shava', 0)}\n"
        f"üç¢ –®–∞—à–ª—ã—á–∫–æ–≤: {data.get('shash', 0)}"
    )

    sent = await try_send_channel(context, channel_text)
    if sent:
        await update.message.reply_text(stats_text)
    else:
        await update.message.reply_text(
            stats_text + "\n\n‚ö†Ô∏è CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª."
        )

def main():
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç.")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("blin", blin))
    app.add_handler(CommandHandler("mak", mak))
    app.add_handler(CommandHandler("shava", shava))
    app.add_handler(CommandHandler("shash", shash))
    app.add_handler(CommandHandler("stats", stats))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()
