import os
import json
import shutil
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.error import TelegramError

# === Logs property ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === Settings ===
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
DATA_FILE = 'data.json'
BACKUP_FILE = 'data.json.bak'

# === Utilits ===
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.")
        return {"blin": 0, "mak": 0, "shava": 0, "shash": 0}

def save_data(data):
    if os.path.exists(DATA_FILE):
        shutil.copy(DATA_FILE, BACKUP_FILE)
        logger.info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)
    logger.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

async def try_send_channel(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not CHANNEL_ID:
        logger.warning("CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return False
    try:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=text,
            parse_mode='Markdown'
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        return True
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False

def log_user_action(update: Update, command: str):
    user = update.effective_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} | @{user.username} | ID: {user.id} ‚Üí –ö–æ–º–∞–Ω–¥–∞: /{command}")

# === Food handler ===
async def food_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, food_key: str, emoji: str, name: str, comment: str):
    log_user_action(update, food_key)

    data = load_data()
    data[food_key] += 1
    save_data(data)

    response_text = f"{emoji} {name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–í—Å–µ–≥–æ: {data[food_key]}"
    channel_text = (
        f"üì¢ *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ!*\n\n"
        f"{emoji} {name} –±—ã–ª —Å—ä–µ–¥–µ–Ω.\n"
        f"üìä –í—Å–µ–≥–æ {name.lower()}–æ–≤: *{data[food_key]}*.\n"
        f"{comment}"
    )

    sent = await try_send_channel(context, channel_text)
    await update.message.reply_text(response_text if sent else response_text + "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª.")

# === Comands ===
async def blin(update, context):
    await food_handler(update, context, "blin", "ü•û", "–ë–ª–∏–Ω", "üçΩÔ∏è –ö—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –º–µ—Ä—ã...")

async def mak(update, context):
    await food_handler(update, context, "mak", "üçî", "–ú–∞–∫", "üëÄ –î–∏–µ—Ç–æ–ª–æ–≥ –≤ –ø–∞–Ω–∏–∫–µ...")

async def shava(update, context):
    await food_handler(update, context, "shava", "üåØ", "–®–∞—É—Ä–º–∞", "üî• –û—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä!")

async def shash(update, context):
    await food_handler(update, context, "shash", "üç¢", "–®–∞—à–ª—ã—á–û–ö", "üòã –ü–∞—Ö–Ω–µ—Ç –¥—ã–º–∫–æ–º...")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update, "stats")
    data = load_data()
    stats_text = (
        f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"ü•û –ë–ª–∏–Ω–æ–≤: {data['blin']}\n"
        f"üçî –ú–∞–∫–æ–≤: {data['mak']}\n"
        f"üåØ –®–∞—É—Ä–º—ã: {data['shava']}\n"
        f"üç¢ –®–∞—à–ª—ã—á–û–ö–æ–≤: {data['shash']}"
    )
    sent = await try_send_channel(context, stats_text)
    await update.message.reply_text(stats_text if sent else stats_text + "\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update, "start")
    keyboard = [
        ["/blin", "/mak"],
        ["/shava", "/shash"],
        ["/stats"]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Å—ä–µ–¥–µ–Ω–æ? üëá",
        reply_markup=reply_markup
    )

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===
def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("blin", blin))
    app.add_handler(CommandHandler("mak", mak))
    app.add_handler(CommandHandler("shava", shava))
    app.add_handler(CommandHandler("shash", shash))
    app.add_handler(CommandHandler("stats", stats))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    try:
        app.run_polling()
    except KeyboardInterrupt:
        logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")

if __name__ == "__main__":
    main()
